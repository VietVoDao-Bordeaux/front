// # Rétablissement du flux
// http://nicolasgallagher.com/micro-clearfix-hack/
@mixin clearfix {
  zoom: 1;

  &::before,
  &::after {
    content: '';
    display: table;
  }

  &::after {
    clear: both;
  }
}

// # _Reset_ (et sa version surchargée)
@mixin reset {
  margin: 0;
  padding: 0;
  border: 0;
  background-color: transparent; // pour les boutons
  list-style-type: none; // pour les listes
}

@mixin reset-i {
  /* stylelint-disable-next-line declaration-no-important */
  margin: 0 !important;
  /* stylelint-disable-next-line declaration-no-important */
  padding: 0 !important;
  /* stylelint-disable-next-line declaration-no-important */
  border: 0 !important;
  /* stylelint-disable-next-line declaration-no-important */
  background-color: transparent !important; // pour les boutons
  /* stylelint-disable-next-line declaration-no-important */
  list-style-type: none !important; // pour les listes
}

@mixin reset-text() {
  // We deliberately do NOT reset font-size.
  font-style: normal;
  font-weight: normal;
  letter-spacing: normal;
  line-break: auto;
  line-height: 1.5;
  text-align: left; // Fallback for where `start` is not supported
  text-decoration: none;
  text-shadow: none;
  text-transform: none;
  white-space: normal;
  word-break: normal;
  word-spacing: normal;
  word-wrap: normal;
}

// # Contenu masqué visuellement (et sa version surchargée)
// https://developer.yahoo.com/blogs/ydn/clip-hidden-content-better-accessibility-53456.html
@mixin visually-hidden {
  position: absolute;
  padding: 0;
  border: 0;
  height: 1px;
  width: 1px;
  overflow: hidden;
  clip: rect(1px  1px  1px  1px);
  clip: rect(1px, 1px, 1px, 1px);
  opacity: 0.001;
}

@mixin visually-hidden-i {
  /* stylelint-disable declaration-no-important */
  position: absolute !important;
  padding: 0 !important;
  border: 0 !important;
  height: 1px !important;
  width: 1px !important;
  overflow: hidden !important;
  clip: rect(1px  1px  1px  1px) !important;
  clip: rect(1px, 1px, 1px, 1px) !important;
  opacity: 0.001 !important;
  /* stylelint-enable declaration-no-important */
}

// Et la possibilité de le ré-afficher (et sa version surchargée)
@mixin visually-visible {
  position: static;
  height: auto;
  width: auto;
  clip: auto;
  overflow: visible;
  opacity: 1;
}

@mixin visually-visible-i {
  /* stylelint-disable declaration-no-important */
  position: static !important;
  height: auto !important;
  width: auto !important;
  clip: auto !important;
  overflow: visible !important;
  opacity: 1 !important;
  /* stylelint-enable declaration-no-important */
}

// # Survol des liens
// Pas de soulignement par défaut, puis soulignement au survol ou au focus.
@mixin deco-roll {
  text-decoration: none;

  &:hover,
  &:focus {
    text-decoration: underline;
  }
}

// Ou soulignement par défaut, puis pas de soulignement au survol ou au focus.
@mixin deco-unroll {
  text-decoration: underline;

  &:hover,
  &:focus {
    text-decoration: none;
  }
}

// # Étirement des blocs
@mixin stretch($smash-length: 0) {
  position: absolute;
  left: $smash-length;
  top: $smash-length;
  bottom: $smash-length;
  right: $smash-length;

  // Avec une option pour positionner une image centrée quelque soit ça taille.
  @if strip-unit($smash-length) <= -999 {
    margin: auto;
  }
}

@mixin paragraph ($modulo: 1, $font-size: $base-font-size) {
  margin-bottom: em($base-line-height * $modulo, $font-size);
}

@mixin background-image-retina($filename, $extension: 'png', $need-width-height: false) {
  background-image: url($url-folder + $filename + "." + $extension);
  background-repeat: no-repeat;

  /* stylelint-disable media-feature-name-no-vendor-prefix, media-feature-name-no-unknown */
  @media (min--moz-device-pixel-ratio: 1.3),
    (-o-min-device-pixel-ratio: 2.6/2),
    (-webkit-min-device-pixel-ratio: 1.3),
    (min-device-pixel-ratio: 1.3),
    (min-resolution: 1.3dppx) {
    // on retina, use image that's scaled by 2
    background-image: url($url-folder + $filename + "@2x." + $extension);
    background-size: image-width($filename + "." + $extension) image-height($filename + "." + $extension);
  }
  /* stylelint-enable media-feature-name-no-vendor-prefix, media-feature-name-no-unknown */

  .no-backgroundsize & {
    background-image: url($url-folder + $filename + "." + $extension);
  }

  @if ($need-width-height) {
    width: image-width($filename + "." + $extension);
    height: image-height($filename + "." + $extension);
  }
}

@mixin no-js() {
  html:not(.no-js) {
    @content;
  }
}

@mixin atom-propertie($propertie, $propertie-name, $type-name, $value, $from-px: 0px) {/* stylelint-disable-line length-zero-no-unit */
  @if $from-px == 0 {
    .#{$propertie-name}-#{$type-name} {
      #{$propertie}: $value;
    }
  }

  @else {
    @include mq($from: $from-px) {
      .#{$propertie-name}-#{$type-name} {
        #{$propertie}: $value;
      }
    }
  }
}

@mixin atom-propertie-spacing($propertie, $propertie-name, $type-name, $value, $from-px: 0px) {/* stylelint-disable-line length-zero-no-unit */
  @if $from-px == 0 {
    .#{$propertie-name}-#{$type-name} {
      #{$propertie}: rem($value);
    }

    .#{$propertie-name}-#{$type-name}-0 {
      #{$propertie}: 0;
    }

    .#{$propertie-name}-#{$type-name}-0-25 {
      #{$propertie}: rem($value * 0.25);
    }

    .#{$propertie-name}-#{$type-name}-0-5 {
      #{$propertie}: rem($value * 0.5);
    }

    .#{$propertie-name}-#{$type-name}-0-75 {
      #{$propertie}: rem($value * 0.75);
    }

    .#{$propertie-name}-#{$type-name}-1-25 {
      #{$propertie}: rem($value * 1.25);
    }

    .#{$propertie-name}-#{$type-name}-1-5 {
      #{$propertie}: rem($value * 1.5);
    }

    .#{$propertie-name}-#{$type-name}-1-75 {
      #{$propertie}: rem($value * 1.75);
    }

    .#{$propertie-name}-#{$type-name}-2 {
      #{$propertie}: rem($value * 2);
    }

    .#{$propertie-name}-#{$type-name}-2-5 {
      #{$propertie}: rem($value * 2.5);
    }

    .#{$propertie-name}-#{$type-name}-3 {
      #{$propertie}: rem($value * 3);
    }
  }

  @else {
    @include mq($from: $from-px) {
      .#{$propertie-name}-#{$type-name} {
        #{$propertie}: rem($value);
      }

      .#{$propertie-name}-#{$type-name}-0 {
        #{$propertie}: 0;
      }

      .#{$propertie-name}-#{$type-name}-0-25 {
        #{$propertie}: rem($value * 0.25);
      }

      .#{$propertie-name}-#{$type-name}-0-5 {
        #{$propertie}: rem($value * 0.5);
      }

      .#{$propertie-name}-#{$type-name}-0-75 {
        #{$propertie}: rem($value * 0.75);
      }

      .#{$propertie-name}-#{$type-name}-1-25 {
        #{$propertie}: rem($value * 1.25);
      }

      .#{$propertie-name}-#{$type-name}-1-5 {
        #{$propertie}: rem($value * 1.5);
      }

      .#{$propertie-name}-#{$type-name}-1-75 {
        #{$propertie}: rem($value * 1.75);
      }

      .#{$propertie-name}-#{$type-name}-2 {
        #{$propertie}: rem($value * 2);
      }

      .#{$propertie-name}-#{$type-name}-2-5 {
        #{$propertie}: rem($value * 2.5);
      }

      .#{$propertie-name}-#{$type-name}-3 {
        #{$propertie}: rem($value * 3);
      }
    }
  }
}

@mixin responsive-properties($propertie-name, $type-name, $propertie, $value, $spacing: false) {
  @if $spacing {
    @include atom-propertie-spacing($propertie, $propertie-name, $type-name, $value);

    $propertie-rwd: $propertie-name + '-sm';

    @include atom-propertie-spacing($propertie, $propertie-rwd, $type-name, $value, mobile);

    $propertie-rwd: $propertie-name + '-ld';

    @include atom-propertie-spacing($propertie, $propertie-rwd, $type-name, $value, landscape);

    $propertie-rwd: $propertie-name + '-md';

    @include atom-propertie-spacing($propertie, $propertie-rwd, $type-name, $value, tablet);

    $propertie-rwd: $propertie-name + '-lg';

    @include atom-propertie-spacing($propertie, $propertie-rwd, $type-name, $value, desktop);

    $propertie-rwd: $propertie-name + '-xlg';

    @include atom-propertie-spacing($propertie, $propertie-rwd, $type-name, $value, large);

    $propertie-rwd: $propertie-name + '-wide';

    @include atom-propertie-spacing($propertie, $propertie-rwd, $type-name, $value, wide);
  }

  @else {
    @include atom-propertie($propertie, $propertie-name, $type-name, $value);

    $propertie-rwd: $propertie-name + '-sm';

    @include atom-propertie($propertie, $propertie-rwd, $type-name, $value, mobile);

    $propertie-rwd: $propertie-name + '-ld';

    @include atom-propertie($propertie, $propertie-rwd, $type-name, $value, landscape);

    $propertie-rwd: $propertie-name + '-md';

    @include atom-propertie($propertie, $propertie-rwd, $type-name, $value, tablet);

    $propertie-rwd: $propertie-name + '-lg';

    @include atom-propertie($propertie, $propertie-rwd, $type-name, $value, desktop);

    $propertie-rwd: $propertie-name + '-xlg';

    @include atom-propertie($propertie, $propertie-rwd, $type-name, $value, large);

    $propertie-rwd: $propertie-name + '-wide';

    @include atom-propertie($propertie, $propertie-rwd, $type-name, $value, wide);
  }
}

@mixin responsive-properties-map($propertie-name, $css-propertie, $values) {
  @each $type, $value in $values {
    @include atom-propertie($css-propertie, $propertie-name, $type, $value);
  }

  @each $type, $value in $values {
    $propertie-rwd: $propertie-name + '-sm';

    @include atom-propertie($css-propertie, $propertie-rwd, $type, $value, mobile);
  }

  @each $type, $value in $values {
    $propertie-rwd: $propertie-name + '-ld';

    @include atom-propertie($css-propertie, $propertie-rwd, $type, $value, landscape);
  }

  @each $type, $value in $values {
    $propertie-rwd: $propertie-name + '-md';

    @include atom-propertie($css-propertie, $propertie-rwd, $type, $value, tablet);
  }

  @each $type, $value in $values {
    $propertie-rwd: $propertie-name + '-lg';

    @include atom-propertie($css-propertie, $propertie-rwd, $type, $value, desktop);
  }

  @each $type, $value in $values {
    $propertie-rwd: $propertie-name + '-xlg';

    @include atom-propertie($css-propertie, $propertie-rwd, $type, $value, large);
  }

  @each $type, $value in $values {
    $propertie-rwd: $propertie-name + '-wide';

    @include atom-propertie($css-propertie, $propertie-rwd, $type, $value, wide);
  }
}

@mixin open-sans {
  font-family: "Open Sans", Arial, sans-serif;
}

@mixin montserrat {
  font-family: "Montserrat", Arial, sans-serif;
}

@mixin hover() {
  .no-touchevents & {
    &:hover,
    &:focus {
      @content;
    }
  }
}
